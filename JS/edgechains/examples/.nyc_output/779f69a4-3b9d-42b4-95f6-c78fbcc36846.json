{"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.controller.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.controller.ts","statementMap":{"0":{"start":{"line":2,"column":17},"end":{"line":7,"column":1}},"1":{"start":{"line":3,"column":12},"end":{"line":3,"column":28}},"2":{"start":{"line":3,"column":34},"end":{"line":3,"column":125}},"3":{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},"4":{"start":{"line":4,"column":79},"end":{"line":4,"column":131}},"5":{"start":{"line":5,"column":9},"end":{"line":5,"column":150}},"6":{"start":{"line":5,"column":22},"end":{"line":5,"column":43}},"7":{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},"8":{"start":{"line":5,"column":81},"end":{"line":5,"column":150}},"9":{"start":{"line":6,"column":4},"end":{"line":6,"column":66}},"10":{"start":{"line":8,"column":17},"end":{"line":10,"column":1}},"11":{"start":{"line":9,"column":4},"end":{"line":9,"column":109}},"12":{"start":{"line":9,"column":79},"end":{"line":9,"column":109}},"13":{"start":{"line":11,"column":14},"end":{"line":13,"column":1}},"14":{"start":{"line":12,"column":4},"end":{"line":12,"column":73}},"15":{"start":{"line":12,"column":36},"end":{"line":12,"column":71}},"16":{"start":{"line":14,"column":0},"end":{"line":14,"column":62}},"17":{"start":{"line":15,"column":0},"end":{"line":15,"column":31}},"18":{"start":{"line":16,"column":17},"end":{"line":16,"column":42}},"19":{"start":{"line":17,"column":22},"end":{"line":17,"column":46}},"20":{"start":{"line":18,"column":22},"end":{"line":18,"column":58}},"21":{"start":{"line":19,"column":24},"end":{"line":19,"column":65}},"22":{"start":{"line":20,"column":20},"end":{"line":42,"column":1}},"23":{"start":{"line":22,"column":8},"end":{"line":22,"column":37}},"24":{"start":{"line":25,"column":8},"end":{"line":25,"column":42}},"25":{"start":{"line":28,"column":27},"end":{"line":36,"column":9}},"26":{"start":{"line":37,"column":8},"end":{"line":37,"column":69}},"27":{"start":{"line":40,"column":8},"end":{"line":40,"column":49}},"28":{"start":{"line":43,"column":0},"end":{"line":43,"column":38}},"29":{"start":{"line":44,"column":0},"end":{"line":49,"column":46}},"30":{"start":{"line":50,"column":0},"end":{"line":58,"column":48}},"31":{"start":{"line":59,"column":0},"end":{"line":65,"column":51}},"32":{"start":{"line":66,"column":0},"end":{"line":69,"column":18}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":46},"end":{"line":2,"column":47}},"loc":{"start":{"line":2,"column":87},"end":{"line":7,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":8,"column":46},"end":{"line":8,"column":47}},"loc":{"start":{"line":8,"column":62},"end":{"line":10,"column":1}},"line":8},"2":{"name":"(anonymous_2)","decl":{"start":{"line":11,"column":40},"end":{"line":11,"column":41}},"loc":{"start":{"line":11,"column":73},"end":{"line":13,"column":1}},"line":11},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":11},"end":{"line":12,"column":12}},"loc":{"start":{"line":12,"column":34},"end":{"line":12,"column":73}},"line":12},"4":{"name":"(anonymous_4)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":28},"end":{"line":23,"column":5}},"line":21},"5":{"name":"(anonymous_5)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":15},"end":{"line":26,"column":5}},"line":24},"6":{"name":"(anonymous_6)","decl":{"start":{"line":27,"column":4},"end":{"line":27,"column":5}},"loc":{"start":{"line":27,"column":30},"end":{"line":38,"column":5}},"line":27},"7":{"name":"(anonymous_7)","decl":{"start":{"line":39,"column":4},"end":{"line":39,"column":5}},"loc":{"start":{"line":39,"column":20},"end":{"line":41,"column":5}},"line":39}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":17},"end":{"line":7,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":18},"end":{"line":2,"column":22}},{"start":{"line":2,"column":26},"end":{"line":2,"column":41}},{"start":{"line":2,"column":46},"end":{"line":7,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":34},"end":{"line":3,"column":125}},"type":"cond-expr","locations":[{"start":{"line":3,"column":42},"end":{"line":3,"column":48}},{"start":{"line":3,"column":51},"end":{"line":3,"column":125}}],"line":3},"2":{"loc":{"start":{"line":3,"column":51},"end":{"line":3,"column":125}},"type":"cond-expr","locations":[{"start":{"line":3,"column":67},"end":{"line":3,"column":118}},{"start":{"line":3,"column":121},"end":{"line":3,"column":125}}],"line":3},"3":{"loc":{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},"type":"if","locations":[{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},{"start":{"line":4,"column":4},"end":{"line":5,"column":150}}],"line":4},"4":{"loc":{"start":{"line":4,"column":8},"end":{"line":4,"column":77}},"type":"binary-expr","locations":[{"start":{"line":4,"column":8},"end":{"line":4,"column":35}},{"start":{"line":4,"column":39},"end":{"line":4,"column":77}}],"line":4},"5":{"loc":{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},"type":"if","locations":[{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},{"start":{"line":5,"column":58},"end":{"line":5,"column":150}}],"line":5},"6":{"loc":{"start":{"line":5,"column":85},"end":{"line":5,"column":149}},"type":"binary-expr","locations":[{"start":{"line":5,"column":86},"end":{"line":5,"column":143}},{"start":{"line":5,"column":148},"end":{"line":5,"column":149}}],"line":5},"7":{"loc":{"start":{"line":5,"column":86},"end":{"line":5,"column":143}},"type":"cond-expr","locations":[{"start":{"line":5,"column":94},"end":{"line":5,"column":98}},{"start":{"line":5,"column":101},"end":{"line":5,"column":143}}],"line":5},"8":{"loc":{"start":{"line":5,"column":101},"end":{"line":5,"column":143}},"type":"cond-expr","locations":[{"start":{"line":5,"column":109},"end":{"line":5,"column":126}},{"start":{"line":5,"column":129},"end":{"line":5,"column":143}}],"line":5},"9":{"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":62}},"type":"binary-expr","locations":[{"start":{"line":6,"column":11},"end":{"line":6,"column":16}},{"start":{"line":6,"column":20},"end":{"line":6,"column":21}},{"start":{"line":6,"column":25},"end":{"line":6,"column":62}}],"line":6},"10":{"loc":{"start":{"line":8,"column":17},"end":{"line":10,"column":1}},"type":"binary-expr","locations":[{"start":{"line":8,"column":18},"end":{"line":8,"column":22}},{"start":{"line":8,"column":26},"end":{"line":8,"column":41}},{"start":{"line":8,"column":46},"end":{"line":10,"column":1}}],"line":8},"11":{"loc":{"start":{"line":9,"column":4},"end":{"line":9,"column":109}},"type":"if","locations":[{"start":{"line":9,"column":4},"end":{"line":9,"column":109}},{"start":{"line":9,"column":4},"end":{"line":9,"column":109}}],"line":9},"12":{"loc":{"start":{"line":9,"column":8},"end":{"line":9,"column":77}},"type":"binary-expr","locations":[{"start":{"line":9,"column":8},"end":{"line":9,"column":35}},{"start":{"line":9,"column":39},"end":{"line":9,"column":77}}],"line":9},"13":{"loc":{"start":{"line":11,"column":14},"end":{"line":13,"column":1}},"type":"binary-expr","locations":[{"start":{"line":11,"column":15},"end":{"line":11,"column":19}},{"start":{"line":11,"column":23},"end":{"line":11,"column":35}},{"start":{"line":11,"column":40},"end":{"line":13,"column":1}}],"line":11}},"s":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1,"11":0,"12":0,"13":1,"14":0,"15":0,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0},"f":{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0},"b":{"0":[1,1,1],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[1,1,1],"11":[0,0],"12":[0,0],"13":[1,1,1]},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.controller.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAA8E;AAC9E,+CAA2C;AAC3C,2DAAmE;AACnE,kEAA4D;AAGrD,IAAM,aAAa,GAAnB,MAAM,aAAa;IACtB,YAA6B,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAGvD,QAAQ;QACJ,OAAO,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAID,UAAU,CAAU,MAAW,EAAU,KAAU;QAC/C,MAAM,UAAU,GAAG;YACf,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,aAAa,EAAE,KAAK,CAAC,aAAa;YAClC,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,gBAAgB,EAAE,KAAK,CAAC,gBAAgB;YACxC,UAAU,EAAE,KAAK,CAAC,UAAU;YAC5B,QAAQ,EAAE,KAAK,CAAC,QAAQ;SAC3B,CAAC;QACF,OAAO,IAAA,oCAAsB,EAAC,UAAU,CAAC,CAAC;IAC9C,CAAC;IAID,aAAa;QACT,OAAO,IAAA,0BAAU,GAAE,CAAC;IACxB,CAAC;CACJ,CAAA;AA5BY,sCAAa;AAItB;IADC,IAAA,YAAG,GAAE;;;;6CAGL;AAID;IAFC,IAAA,aAAI,EAAC,wBAAwB,CAAC;IAC9B,IAAA,iBAAQ,EAAC,GAAG,CAAC;IACF,WAAA,IAAA,cAAK,GAAE,CAAA;IAAe,WAAA,IAAA,aAAI,GAAE,CAAA;;;;+CAWvC;AAID;IAFC,IAAA,aAAI,EAAC,oBAAoB,CAAC;IAC1B,IAAA,iBAAQ,EAAC,GAAG,CAAC;;;;kDAGb;wBA3BQ,aAAa;IADzB,IAAA,mBAAU,GAAE;qCAEgC,wBAAU;GAD1C,aAAa,CA4BzB","sourcesContent":["import { Body, Controller, Get, HttpCode, Post, Query } from '@nestjs/common';\nimport { AppService } from './app.service';\nimport { hydeSearchAdaEmbedding } from './hydeExample/hydeExample';\nimport { getContent } from './testGeneration/TestGenerator';\n\n@Controller()\nexport class AppController {\n    constructor(private readonly appService: AppService) {}\n\n    @Get()\n    getHello(): string {\n        return this.appService.getHello();\n    }\n\n    @Post('/hyde-search/query-rrf')\n    @HttpCode(200)\n    hydeSearch(@Query() params: any, @Body() query: any) {\n        const arkRequest = {\n            topK: params.topK,\n            metadataTable: query.metadataTable,\n            query: query.query,\n            textWeight: query.textWeight,\n            similarityWeight: query.similarityWeight,\n            dateWeight: query.dateWeight,\n            orderRRF: query.orderRRF,\n        };\n        return hydeSearchAdaEmbedding(arkRequest);\n    }\n\n    @Post('/testcase/generate')\n    @HttpCode(200)\n    testGenerator(){\n        return getContent();\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1a5ce167997a50c174fd420328ea5e0e5fdf4223","contentHash":"60c622de341191246fb3bc97e28447514ac3a0dc9a9b7d795257328f31d30415"},"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.service.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.service.ts","statementMap":{"0":{"start":{"line":2,"column":17},"end":{"line":7,"column":1}},"1":{"start":{"line":3,"column":12},"end":{"line":3,"column":28}},"2":{"start":{"line":3,"column":34},"end":{"line":3,"column":125}},"3":{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},"4":{"start":{"line":4,"column":79},"end":{"line":4,"column":131}},"5":{"start":{"line":5,"column":9},"end":{"line":5,"column":150}},"6":{"start":{"line":5,"column":22},"end":{"line":5,"column":43}},"7":{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},"8":{"start":{"line":5,"column":81},"end":{"line":5,"column":150}},"9":{"start":{"line":6,"column":4},"end":{"line":6,"column":66}},"10":{"start":{"line":8,"column":0},"end":{"line":8,"column":62}},"11":{"start":{"line":9,"column":0},"end":{"line":9,"column":28}},"12":{"start":{"line":10,"column":17},"end":{"line":10,"column":42}},"13":{"start":{"line":11,"column":17},"end":{"line":15,"column":1}},"14":{"start":{"line":13,"column":8},"end":{"line":13,"column":30}},"15":{"start":{"line":16,"column":0},"end":{"line":16,"column":32}},"16":{"start":{"line":17,"column":0},"end":{"line":19,"column":15}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":46},"end":{"line":2,"column":47}},"loc":{"start":{"line":2,"column":87},"end":{"line":7,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":4},"end":{"line":12,"column":5}},"loc":{"start":{"line":12,"column":15},"end":{"line":14,"column":5}},"line":12}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":17},"end":{"line":7,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":18},"end":{"line":2,"column":22}},{"start":{"line":2,"column":26},"end":{"line":2,"column":41}},{"start":{"line":2,"column":46},"end":{"line":7,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":34},"end":{"line":3,"column":125}},"type":"cond-expr","locations":[{"start":{"line":3,"column":42},"end":{"line":3,"column":48}},{"start":{"line":3,"column":51},"end":{"line":3,"column":125}}],"line":3},"2":{"loc":{"start":{"line":3,"column":51},"end":{"line":3,"column":125}},"type":"cond-expr","locations":[{"start":{"line":3,"column":67},"end":{"line":3,"column":118}},{"start":{"line":3,"column":121},"end":{"line":3,"column":125}}],"line":3},"3":{"loc":{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},"type":"if","locations":[{"start":{"line":4,"column":4},"end":{"line":5,"column":150}},{"start":{"line":4,"column":4},"end":{"line":5,"column":150}}],"line":4},"4":{"loc":{"start":{"line":4,"column":8},"end":{"line":4,"column":77}},"type":"binary-expr","locations":[{"start":{"line":4,"column":8},"end":{"line":4,"column":35}},{"start":{"line":4,"column":39},"end":{"line":4,"column":77}}],"line":4},"5":{"loc":{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},"type":"if","locations":[{"start":{"line":5,"column":58},"end":{"line":5,"column":150}},{"start":{"line":5,"column":58},"end":{"line":5,"column":150}}],"line":5},"6":{"loc":{"start":{"line":5,"column":85},"end":{"line":5,"column":149}},"type":"binary-expr","locations":[{"start":{"line":5,"column":86},"end":{"line":5,"column":143}},{"start":{"line":5,"column":148},"end":{"line":5,"column":149}}],"line":5},"7":{"loc":{"start":{"line":5,"column":86},"end":{"line":5,"column":143}},"type":"cond-expr","locations":[{"start":{"line":5,"column":94},"end":{"line":5,"column":98}},{"start":{"line":5,"column":101},"end":{"line":5,"column":143}}],"line":5},"8":{"loc":{"start":{"line":5,"column":101},"end":{"line":5,"column":143}},"type":"cond-expr","locations":[{"start":{"line":5,"column":109},"end":{"line":5,"column":126}},{"start":{"line":5,"column":129},"end":{"line":5,"column":143}}],"line":5},"9":{"loc":{"start":{"line":6,"column":11},"end":{"line":6,"column":62}},"type":"binary-expr","locations":[{"start":{"line":6,"column":11},"end":{"line":6,"column":16}},{"start":{"line":6,"column":20},"end":{"line":6,"column":21}},{"start":{"line":6,"column":25},"end":{"line":6,"column":62}}],"line":6}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":1,"10":1,"11":1,"12":1,"13":1,"14":0,"15":1,"16":1},"f":{"0":1,"1":0},"b":{"0":[1,1,1],"1":[1,0],"2":[0,0],"3":[1,0],"4":[1,1],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[1,0,0]},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.service.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/app.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAA4C;AAGrC,IAAM,UAAU,GAAhB,MAAM,UAAU;IACnB,QAAQ;QACJ,OAAO,cAAc,CAAC;IAC1B,CAAC;CACJ,CAAA;AAJY,gCAAU;qBAAV,UAAU;IADtB,IAAA,mBAAU,GAAE;GACA,UAAU,CAItB","sourcesContent":["import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n    getHello(): string {\n        return 'Hello World!';\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"566f7e0e02a3826477ba399747eb71c34a48f47a","contentHash":"e87935e42f8cae19393dbfc6c7e81b698365ed339fcadfc6669f322dba61450f"},"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/hydeExample/hydeExample.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/hydeExample/hydeExample.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":40}},"2":{"start":{"line":4,"column":23},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":28}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":57}},"5":{"start":{"line":7,"column":25},"end":{"line":7,"column":57}},"6":{"start":{"line":9,"column":0},"end":{"line":13,"column":60}},"7":{"start":{"line":10,"column":4},"end":{"line":10,"column":48}},"8":{"start":{"line":11,"column":4},"end":{"line":11,"column":40}},"9":{"start":{"line":12,"column":4},"end":{"line":12,"column":40}},"10":{"start":{"line":14,"column":21},"end":{"line":14,"column":191}},"11":{"start":{"line":16,"column":4},"end":{"line":76,"column":5}},"12":{"start":{"line":17,"column":22},"end":{"line":17,"column":37}},"13":{"start":{"line":18,"column":26},"end":{"line":18,"column":36}},"14":{"start":{"line":19,"column":22},"end":{"line":19,"column":38}},"15":{"start":{"line":20,"column":21},"end":{"line":20,"column":44}},"16":{"start":{"line":21,"column":24},"end":{"line":21,"column":52}},"17":{"start":{"line":22,"column":27},"end":{"line":22,"column":88}},"18":{"start":{"line":23,"column":25},"end":{"line":23,"column":83}},"19":{"start":{"line":24,"column":29},"end":{"line":24,"column":67}},"20":{"start":{"line":25,"column":31},"end":{"line":25,"column":63}},"21":{"start":{"line":26,"column":25},"end":{"line":30,"column":35}},"22":{"start":{"line":31,"column":23},"end":{"line":31,"column":52}},"23":{"start":{"line":32,"column":28},"end":{"line":32,"column":60}},"24":{"start":{"line":33,"column":30},"end":{"line":33,"column":53}},"25":{"start":{"line":34,"column":36},"end":{"line":37,"column":11}},"26":{"start":{"line":35,"column":30},"end":{"line":35,"column":65}},"27":{"start":{"line":36,"column":12},"end":{"line":36,"column":29}},"28":{"start":{"line":38,"column":25},"end":{"line":38,"column":158}},"29":{"start":{"line":39,"column":28},"end":{"line":39,"column":52}},"30":{"start":{"line":40,"column":30},"end":{"line":40,"column":32}},"31":{"start":{"line":41,"column":8},"end":{"line":43,"column":9}},"32":{"start":{"line":42,"column":12},"end":{"line":42,"column":121}},"33":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"34":{"start":{"line":45,"column":12},"end":{"line":45,"column":40}},"35":{"start":{"line":47,"column":28},"end":{"line":47,"column":55}},"36":{"start":{"line":48,"column":30},"end":{"line":48,"column":41}},"37":{"start":{"line":49,"column":32},"end":{"line":49,"column":74}},"38":{"start":{"line":50,"column":8},"end":{"line":54,"column":36}},"39":{"start":{"line":55,"column":34},"end":{"line":55,"column":63}},"40":{"start":{"line":56,"column":30},"end":{"line":56,"column":70}},"41":{"start":{"line":57,"column":8},"end":{"line":60,"column":36}},"42":{"start":{"line":61,"column":32},"end":{"line":61,"column":61}},"43":{"start":{"line":62,"column":29},"end":{"line":65,"column":9}},"44":{"start":{"line":66,"column":28},"end":{"line":66,"column":70}},"45":{"start":{"line":67,"column":25},"end":{"line":70,"column":9}},"46":{"start":{"line":71,"column":8},"end":{"line":71,"column":24}},"47":{"start":{"line":74,"column":8},"end":{"line":74,"column":29}},"48":{"start":{"line":75,"column":8},"end":{"line":75,"column":20}},"49":{"start":{"line":78,"column":0},"end":{"line":78,"column":56}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":9,"column":1},"end":{"line":9,"column":2}},"loc":{"start":{"line":9,"column":35},"end":{"line":13,"column":1}},"line":9},"1":{"name":"hydeSearchAdaEmbedding","decl":{"start":{"line":15,"column":15},"end":{"line":15,"column":37}},"loc":{"start":{"line":15,"column":50},"end":{"line":77,"column":1}},"line":15},"2":{"name":"(anonymous_2)","decl":{"start":{"line":34,"column":66},"end":{"line":34,"column":67}},"loc":{"start":{"line":34,"column":82},"end":{"line":37,"column":9}},"line":34}},"branchMap":{"0":{"loc":{"start":{"line":13,"column":3},"end":{"line":13,"column":58}},"type":"binary-expr","locations":[{"start":{"line":13,"column":3},"end":{"line":13,"column":25}},{"start":{"line":13,"column":30},"end":{"line":13,"column":57}}],"line":13},"1":{"loc":{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":46,"column":9}},{"start":{"line":44,"column":8},"end":{"line":46,"column":9}}],"line":44}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":1},"f":{"0":1,"1":0,"2":0},"b":{"0":[1,1],"1":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/hydeExample/hydeExample.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/hydeExample/hydeExample.ts"],"names":[],"mappings":"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","sourcesContent":["import { Jsonnet } from '@hanazuki/node-jsonnet';\nimport * as path from 'path';\nimport { OpenAiEndpoint } from '../lib/OpenAiEndpoint';\nimport { PostgresClient } from '../lib/PostgresClient';\nimport { ArkRequest } from '../types/ArkRequest';\nenum PostgresDistanceMetric {\n    COSINE = 'COSINE',\n    IP = 'IP',\n    L2 = 'L2',\n}\n\nconst gpt3endpoint = new OpenAiEndpoint(\n    'https://api.openai.com/v1/chat/completions',\n    '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',\n    '',\n    'gpt-3.5-turbo',\n    'user',\n    0.7\n);\n\nexport async function hydeSearchAdaEmbedding(arkRequest: ArkRequest) {\n    try {\n        // Get required params from API...\n        const table = 'ada_hyde_prod';\n        const namespace = '360_docs';\n        const query = arkRequest.query;\n        const topK = Number(arkRequest.topK);\n\n        //\n        const jsonnet = new Jsonnet();\n\n        const promptPath = path.join(process.cwd(), './src/hydeExample/prompts.jsonnet');\n        const hydePath = path.join(process.cwd(), './src/hydeExample/hyde.jsonnet');\n        // Load Jsonnet to extract args..\n        const promptLoader = await jsonnet.evaluateFile(promptPath);\n\n        // Getting ${summary} basePrompt\n        const promptTemplate = JSON.parse(promptLoader).summary;\n\n        // Getting the updated promptTemplate with query\n        let hydeLoader = await jsonnet\n            .extString('promptTemplate', promptTemplate)\n            .extString('time', '')\n            .extString('query', query)\n            .evaluateFile(hydePath);\n\n        // Get concatenated prompt\n        const prompt = JSON.parse(hydeLoader).prompt;\n\n        // Block and get the response from GPT3\n        const gptResponse = await gpt3endpoint.gptFn(prompt);\n\n        // Chain 1 ==> Get Gpt3Response & split\n        const gpt3Responses = gptResponse.split('\\n');\n\n        // Chain 2 ==> Get Embeddings from OpenAI using Each Response\n        const embeddingsListChain: Promise<number[][]> = Promise.all(\n            gpt3Responses.map(async (resp) => {\n                const embedding = await gpt3endpoint.embeddings(resp);\n                return embedding;\n            })\n        );\n\n        // Chain 5 ==> Query via EmbeddingChain\n        const dbClient = new PostgresClient(\n            await embeddingsListChain,\n            PostgresDistanceMetric.IP,\n            topK,\n            20,\n            table,\n            namespace,\n            arkRequest,\n            15\n        );\n        const queryResult = await dbClient.dbQuery();\n\n        // Chain 6 ==> Create Prompt using Embeddings\n        const retrievedDocs: string[] = [];\n\n        for (const embeddings of queryResult) {\n            retrievedDocs.push(\n                `${embeddings.raw_text}\\n score:${embeddings.score}\\n filename:${embeddings.filename}\\n`\n            );\n        }\n\n        if (retrievedDocs.join('').length > 4096) {\n            retrievedDocs.length = 4096;\n        }\n\n        const currentTime = new Date().toLocaleString();\n        const formattedTime = currentTime;\n\n        // System prompt\n        const ansPromptSystem = JSON.parse(promptLoader).ans_prompt_system;\n\n        hydeLoader = await jsonnet\n            .extString(promptTemplate, ansPromptSystem)\n            .extString('time', formattedTime)\n            .extString('qeury', retrievedDocs.join(''))\n            .evaluateFile(hydePath);\n\n        const finalPromptSystem = JSON.parse(hydeLoader).prompt;\n\n        // User prompt\n        const ansPromptUser = JSON.parse(promptLoader).ans_prompt_user;\n\n        hydeLoader = await jsonnet\n            .extString(promptTemplate, ansPromptUser)\n            .extString('qeury', query)\n            .evaluateFile(hydePath);\n        const finalPromptUser = JSON.parse(hydeLoader).prompt;\n\n        const chatMessages = [\n            { role: 'system', content: finalPromptSystem },\n            { role: 'user', content: finalPromptUser },\n        ];\n\n        const finalAnswer = await gpt3endpoint.gptFnChat(chatMessages);\n\n        const response = {\n            wordEmbeddings: queryResult,\n            finalAnswer: finalAnswer,\n        };\n\n        return response;\n    } catch (error) {\n        // Handle errors here\n        console.error(error);\n        throw error;\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"ef44be5395af2338366d467cfd2e87b40cc05abb","contentHash":"b58a305117fb51c4514152aed10ec1fa07921fa65f150418d303cf3461f783d4"},"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/OpenAiEndpoint.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/OpenAiEndpoint.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":16},"end":{"line":4,"column":32}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":23}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":29}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":27}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":27}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":25}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":37}},"9":{"start":{"line":15,"column":25},"end":{"line":45,"column":10}},"10":{"start":{"line":32,"column":12},"end":{"line":32,"column":41}},"11":{"start":{"line":35,"column":12},"end":{"line":44,"column":13}},"12":{"start":{"line":36,"column":16},"end":{"line":36,"column":89}},"13":{"start":{"line":37,"column":16},"end":{"line":37,"column":67}},"14":{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},"15":{"start":{"line":40,"column":16},"end":{"line":40,"column":68}},"16":{"start":{"line":43,"column":16},"end":{"line":43,"column":70}},"17":{"start":{"line":46,"column":8},"end":{"line":46,"column":43}},"18":{"start":{"line":49,"column":25},"end":{"line":73,"column":10}},"19":{"start":{"line":60,"column":12},"end":{"line":60,"column":51}},"20":{"start":{"line":63,"column":12},"end":{"line":72,"column":13}},"21":{"start":{"line":64,"column":16},"end":{"line":64,"column":89}},"22":{"start":{"line":65,"column":16},"end":{"line":65,"column":67}},"23":{"start":{"line":67,"column":17},"end":{"line":72,"column":13}},"24":{"start":{"line":68,"column":16},"end":{"line":68,"column":68}},"25":{"start":{"line":71,"column":16},"end":{"line":71,"column":70}},"26":{"start":{"line":74,"column":8},"end":{"line":74,"column":24}},"27":{"start":{"line":77,"column":25},"end":{"line":102,"column":10}},"28":{"start":{"line":89,"column":12},"end":{"line":89,"column":41}},"29":{"start":{"line":92,"column":12},"end":{"line":101,"column":13}},"30":{"start":{"line":93,"column":16},"end":{"line":93,"column":89}},"31":{"start":{"line":94,"column":16},"end":{"line":94,"column":67}},"32":{"start":{"line":96,"column":17},"end":{"line":101,"column":13}},"33":{"start":{"line":97,"column":16},"end":{"line":97,"column":68}},"34":{"start":{"line":100,"column":16},"end":{"line":100,"column":70}},"35":{"start":{"line":103,"column":8},"end":{"line":103,"column":43}},"36":{"start":{"line":106,"column":25},"end":{"line":136,"column":10}},"37":{"start":{"line":123,"column":12},"end":{"line":123,"column":41}},"38":{"start":{"line":126,"column":12},"end":{"line":135,"column":13}},"39":{"start":{"line":127,"column":16},"end":{"line":127,"column":89}},"40":{"start":{"line":128,"column":16},"end":{"line":128,"column":67}},"41":{"start":{"line":130,"column":17},"end":{"line":135,"column":13}},"42":{"start":{"line":131,"column":16},"end":{"line":131,"column":68}},"43":{"start":{"line":134,"column":16},"end":{"line":134,"column":70}},"44":{"start":{"line":137,"column":8},"end":{"line":137,"column":43}},"45":{"start":{"line":140,"column":0},"end":{"line":140,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":61},"end":{"line":13,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":4},"end":{"line":14,"column":5}},"loc":{"start":{"line":14,"column":24},"end":{"line":47,"column":5}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":31,"column":18},"end":{"line":31,"column":19}},"loc":{"start":{"line":31,"column":38},"end":{"line":33,"column":9}},"line":31},"3":{"name":"(anonymous_3)","decl":{"start":{"line":34,"column":19},"end":{"line":34,"column":20}},"loc":{"start":{"line":34,"column":36},"end":{"line":45,"column":9}},"line":34},"4":{"name":"(anonymous_4)","decl":{"start":{"line":48,"column":4},"end":{"line":48,"column":5}},"loc":{"start":{"line":48,"column":27},"end":{"line":75,"column":5}},"line":48},"5":{"name":"(anonymous_5)","decl":{"start":{"line":59,"column":18},"end":{"line":59,"column":19}},"loc":{"start":{"line":59,"column":38},"end":{"line":61,"column":9}},"line":59},"6":{"name":"(anonymous_6)","decl":{"start":{"line":62,"column":19},"end":{"line":62,"column":20}},"loc":{"start":{"line":62,"column":36},"end":{"line":73,"column":9}},"line":62},"7":{"name":"(anonymous_7)","decl":{"start":{"line":76,"column":4},"end":{"line":76,"column":5}},"loc":{"start":{"line":76,"column":34},"end":{"line":104,"column":5}},"line":76},"8":{"name":"(anonymous_8)","decl":{"start":{"line":88,"column":18},"end":{"line":88,"column":19}},"loc":{"start":{"line":88,"column":38},"end":{"line":90,"column":9}},"line":88},"9":{"name":"(anonymous_9)","decl":{"start":{"line":91,"column":19},"end":{"line":91,"column":20}},"loc":{"start":{"line":91,"column":36},"end":{"line":102,"column":9}},"line":91},"10":{"name":"(anonymous_10)","decl":{"start":{"line":105,"column":4},"end":{"line":105,"column":5}},"loc":{"start":{"line":105,"column":37},"end":{"line":138,"column":5}},"line":105},"11":{"name":"(anonymous_11)","decl":{"start":{"line":122,"column":18},"end":{"line":122,"column":19}},"loc":{"start":{"line":122,"column":38},"end":{"line":124,"column":9}},"line":122},"12":{"name":"(anonymous_12)","decl":{"start":{"line":125,"column":19},"end":{"line":125,"column":20}},"loc":{"start":{"line":125,"column":36},"end":{"line":136,"column":9}},"line":125}},"branchMap":{"0":{"loc":{"start":{"line":35,"column":12},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":35,"column":12},"end":{"line":44,"column":13}},{"start":{"line":35,"column":12},"end":{"line":44,"column":13}}],"line":35},"1":{"loc":{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":17},"end":{"line":44,"column":13}},{"start":{"line":39,"column":17},"end":{"line":44,"column":13}}],"line":39},"2":{"loc":{"start":{"line":63,"column":12},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":72,"column":13}},{"start":{"line":63,"column":12},"end":{"line":72,"column":13}}],"line":63},"3":{"loc":{"start":{"line":67,"column":17},"end":{"line":72,"column":13}},"type":"if","locations":[{"start":{"line":67,"column":17},"end":{"line":72,"column":13}},{"start":{"line":67,"column":17},"end":{"line":72,"column":13}}],"line":67},"4":{"loc":{"start":{"line":92,"column":12},"end":{"line":101,"column":13}},"type":"if","locations":[{"start":{"line":92,"column":12},"end":{"line":101,"column":13}},{"start":{"line":92,"column":12},"end":{"line":101,"column":13}}],"line":92},"5":{"loc":{"start":{"line":96,"column":17},"end":{"line":101,"column":13}},"type":"if","locations":[{"start":{"line":96,"column":17},"end":{"line":101,"column":13}},{"start":{"line":96,"column":17},"end":{"line":101,"column":13}}],"line":96},"6":{"loc":{"start":{"line":126,"column":12},"end":{"line":135,"column":13}},"type":"if","locations":[{"start":{"line":126,"column":12},"end":{"line":135,"column":13}},{"start":{"line":126,"column":12},"end":{"line":135,"column":13}}],"line":126},"7":{"loc":{"start":{"line":130,"column":17},"end":{"line":135,"column":13}},"type":"if","locations":[{"start":{"line":130,"column":17},"end":{"line":135,"column":13}},{"start":{"line":130,"column":17},"end":{"line":135,"column":13}}],"line":130}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":1},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/OpenAiEndpoint.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/OpenAiEndpoint.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nexport class OpenAiEndpoint {\n    url: string;\n    apiKey: string;\n    orgId: string;\n    model: string;\n    role: string;\n    temprature: number;\n\n    constructor(\n        url: string,\n        apiKey: string,\n        orgId: string,\n        model: string,\n        role: string,\n        temprature: number\n    ) {\n        this.url = url;\n        this.apiKey = apiKey;\n        this.orgId = orgId;\n        this.model = model;\n        this.role = role;\n        this.temprature = temprature;\n    }\n\n    async gptFn(prompt: string): Promise<string> {\n        const responce = await axios\n            .post(\n                'https://api.openai.com/v1/chat/completions',\n                {\n                    model: this.model,\n                    messages: [\n                        {\n                            role: this.role,\n                            content: prompt,\n                        },\n                    ],\n                    temperature: this.temprature,\n                },\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + this.apiKey,\n                        'content-type': 'application/json',\n                    },\n                }\n            )\n            .then(function (response) {\n                return response.data.choices;\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    console.log('Server responded with status code:', error.response.status);\n                    console.log('Response data:', error.response.data);\n                } else if (error.request) {\n                    console.log('No response received:', error.request);\n                } else {\n                    console.log('Error creating request:', error.message);\n                }\n            });\n        return responce[0].message.content;\n    }\n\n    async embeddings(resp: string): Promise<number[]> {\n        const responce = await axios\n            .post(\n                'https://api.openai.com/v1/embeddings',\n                {\n                    model: 'text-embedding-ada-002',\n                    input: resp,\n                },\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + this.apiKey,\n                        'content-type': 'application/json',\n                    },\n                }\n            )\n            .then(function (response) {\n                return response.data.data[0].embedding;\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    console.log('Server responded with status code:', error.response.status);\n                    console.log('Response data:', error.response.data);\n                } else if (error.request) {\n                    console.log('No response received:', error.request);\n                } else {\n                    console.log('Error creating request:', error.message);\n                }\n            });\n\n        return responce;\n    }\n\n    async gptFnChat(chatMessages) {\n        const responce = await axios\n            .post(\n                'https://api.openai.com/v1/chat/completions',\n                {\n                    model: this.model,\n                    messages: chatMessages,\n                    temperature: this.temprature,\n                },\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + this.apiKey,\n                        'content-type': 'application/json',\n                    },\n                }\n            )\n            .then(function (response) {\n                return response.data.choices;\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    console.log('Server responded with status code:', error.response.status);\n                    console.log('Response data:', error.response.data);\n                } else if (error.request) {\n                    console.log('No response received:', error.request);\n                } else {\n                    console.log('Error creating request:', error.message);\n                }\n            });\n\n        return responce[0].message.content;\n    }\n\n    async gptFnTestGenerator(prompt: string): Promise<string> {\n        const responce = await axios\n            .post(\n                'https://api.openai.com/v1/chat/completions',\n                {\n                    model: this.model,\n                    messages: [\n                        {\n                            role: this.role,\n                            content: prompt,\n                        },\n                    ],\n                    temperature: this.temprature,\n                },\n                {\n                    headers: {\n                        Authorization: 'Bearer ' + this.apiKey,\n                        'content-type': 'application/json',\n                    },\n                }\n            )\n            .then(function (response) {\n                return response.data.choices;\n            })\n            .catch(function (error) {\n                if (error.response) {\n                    console.log('Server responded with status code:', error.response.status);\n                    console.log('Response data:', error.response.data);\n                } else if (error.request) {\n                    console.log('No response received:', error.request);\n                } else {\n                    console.log('Error creating request:', error.message);\n                }\n            });\n        return responce[0].message.content;\n    }\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3c5323af4d78716381cdfafe02415eb488befab9","contentHash":"eac568231f0f1152f49341c9fc4fd73b4b557501eeff610f91d30157e54d27fb"},"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/PostgresClient.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/PostgresClient.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":32}},"2":{"start":{"line":4,"column":18},"end":{"line":4,"column":36}},"3":{"start":{"line":7,"column":8},"end":{"line":7,"column":45}},"4":{"start":{"line":8,"column":8},"end":{"line":8,"column":29}},"5":{"start":{"line":9,"column":8},"end":{"line":9,"column":25}},"6":{"start":{"line":10,"column":8},"end":{"line":10,"column":29}},"7":{"start":{"line":11,"column":8},"end":{"line":11,"column":35}},"8":{"start":{"line":12,"column":8},"end":{"line":12,"column":35}},"9":{"start":{"line":13,"column":8},"end":{"line":13,"column":37}},"10":{"start":{"line":14,"column":8},"end":{"line":14,"column":37}},"11":{"start":{"line":17,"column":20},"end":{"line":17,"column":59}},"12":{"start":{"line":18,"column":30},"end":{"line":18,"column":55}},"13":{"start":{"line":19,"column":8},"end":{"line":76,"column":9}},"14":{"start":{"line":20,"column":27},"end":{"line":20,"column":71}},"15":{"start":{"line":21,"column":12},"end":{"line":21,"column":46}},"16":{"start":{"line":22,"column":24},"end":{"line":22,"column":26}},"17":{"start":{"line":23,"column":12},"end":{"line":62,"column":13}},"18":{"start":{"line":23,"column":25},"end":{"line":23,"column":26}},"19":{"start":{"line":24,"column":34},"end":{"line":24,"column":72}},"20":{"start":{"line":25,"column":16},"end":{"line":29,"column":222}},"21":{"start":{"line":30,"column":16},"end":{"line":31,"column":85}},"22":{"start":{"line":31,"column":20},"end":{"line":31,"column":85}},"23":{"start":{"line":32,"column":16},"end":{"line":33,"column":86}},"24":{"start":{"line":33,"column":20},"end":{"line":33,"column":86}},"25":{"start":{"line":34,"column":16},"end":{"line":35,"column":79}},"26":{"start":{"line":35,"column":20},"end":{"line":35,"column":79}},"27":{"start":{"line":36,"column":16},"end":{"line":36,"column":311}},"28":{"start":{"line":37,"column":16},"end":{"line":38,"column":90}},"29":{"start":{"line":38,"column":20},"end":{"line":38,"column":90}},"30":{"start":{"line":39,"column":16},"end":{"line":40,"column":90}},"31":{"start":{"line":40,"column":20},"end":{"line":40,"column":90}},"32":{"start":{"line":41,"column":16},"end":{"line":42,"column":90}},"33":{"start":{"line":42,"column":20},"end":{"line":42,"column":90}},"34":{"start":{"line":43,"column":16},"end":{"line":43,"column":225}},"35":{"start":{"line":44,"column":16},"end":{"line":57,"column":17}},"36":{"start":{"line":46,"column":24},"end":{"line":46,"column":75}},"37":{"start":{"line":47,"column":24},"end":{"line":47,"column":30}},"38":{"start":{"line":49,"column":24},"end":{"line":49,"column":76}},"39":{"start":{"line":50,"column":24},"end":{"line":50,"column":30}},"40":{"start":{"line":52,"column":24},"end":{"line":52,"column":75}},"41":{"start":{"line":53,"column":24},"end":{"line":53,"column":30}},"42":{"start":{"line":55,"column":24},"end":{"line":55,"column":59}},"43":{"start":{"line":56,"column":24},"end":{"line":56,"column":30}},"44":{"start":{"line":58,"column":16},"end":{"line":58,"column":48}},"45":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"46":{"start":{"line":60,"column":20},"end":{"line":60,"column":45}},"47":{"start":{"line":63,"column":12},"end":{"line":68,"column":13}},"48":{"start":{"line":64,"column":16},"end":{"line":64,"column":159}},"49":{"start":{"line":67,"column":16},"end":{"line":67,"column":72}},"50":{"start":{"line":69,"column":28},"end":{"line":69,"column":60}},"51":{"start":{"line":70,"column":12},"end":{"line":70,"column":32}},"52":{"start":{"line":71,"column":12},"end":{"line":71,"column":27}},"53":{"start":{"line":74,"column":12},"end":{"line":74,"column":33}},"54":{"start":{"line":75,"column":12},"end":{"line":75,"column":24}},"55":{"start":{"line":79,"column":0},"end":{"line":79,"column":40}},"56":{"start":{"line":81,"column":0},"end":{"line":85,"column":60}},"57":{"start":{"line":82,"column":4},"end":{"line":82,"column":48}},"58":{"start":{"line":83,"column":4},"end":{"line":83,"column":40}},"59":{"start":{"line":84,"column":4},"end":{"line":84,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":6,"column":4},"end":{"line":6,"column":5}},"loc":{"start":{"line":6,"column":100},"end":{"line":15,"column":5}},"line":6},"1":{"name":"(anonymous_1)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":20},"end":{"line":77,"column":5}},"line":16},"2":{"name":"(anonymous_2)","decl":{"start":{"line":81,"column":1},"end":{"line":81,"column":2}},"loc":{"start":{"line":81,"column":35},"end":{"line":85,"column":1}},"line":81}},"branchMap":{"0":{"loc":{"start":{"line":30,"column":16},"end":{"line":31,"column":85}},"type":"if","locations":[{"start":{"line":30,"column":16},"end":{"line":31,"column":85}},{"start":{"line":30,"column":16},"end":{"line":31,"column":85}}],"line":30},"1":{"loc":{"start":{"line":32,"column":16},"end":{"line":33,"column":86}},"type":"if","locations":[{"start":{"line":32,"column":16},"end":{"line":33,"column":86}},{"start":{"line":32,"column":16},"end":{"line":33,"column":86}}],"line":32},"2":{"loc":{"start":{"line":34,"column":16},"end":{"line":35,"column":79}},"type":"if","locations":[{"start":{"line":34,"column":16},"end":{"line":35,"column":79}},{"start":{"line":34,"column":16},"end":{"line":35,"column":79}}],"line":34},"3":{"loc":{"start":{"line":37,"column":16},"end":{"line":38,"column":90}},"type":"if","locations":[{"start":{"line":37,"column":16},"end":{"line":38,"column":90}},{"start":{"line":37,"column":16},"end":{"line":38,"column":90}}],"line":37},"4":{"loc":{"start":{"line":39,"column":16},"end":{"line":40,"column":90}},"type":"if","locations":[{"start":{"line":39,"column":16},"end":{"line":40,"column":90}},{"start":{"line":39,"column":16},"end":{"line":40,"column":90}}],"line":39},"5":{"loc":{"start":{"line":41,"column":16},"end":{"line":42,"column":90}},"type":"if","locations":[{"start":{"line":41,"column":16},"end":{"line":42,"column":90}},{"start":{"line":41,"column":16},"end":{"line":42,"column":90}}],"line":41},"6":{"loc":{"start":{"line":44,"column":16},"end":{"line":57,"column":17}},"type":"switch","locations":[{"start":{"line":45,"column":20},"end":{"line":47,"column":30}},{"start":{"line":48,"column":20},"end":{"line":50,"column":30}},{"start":{"line":51,"column":20},"end":{"line":53,"column":30}},{"start":{"line":54,"column":20},"end":{"line":56,"column":30}}],"line":44},"7":{"loc":{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},"type":"if","locations":[{"start":{"line":59,"column":16},"end":{"line":61,"column":17}},{"start":{"line":59,"column":16},"end":{"line":61,"column":17}}],"line":59},"8":{"loc":{"start":{"line":63,"column":12},"end":{"line":68,"column":13}},"type":"if","locations":[{"start":{"line":63,"column":12},"end":{"line":68,"column":13}},{"start":{"line":63,"column":12},"end":{"line":68,"column":13}}],"line":63},"9":{"loc":{"start":{"line":85,"column":3},"end":{"line":85,"column":58}},"type":"binary-expr","locations":[{"start":{"line":85,"column":3},"end":{"line":85,"column":25}},{"start":{"line":85,"column":30},"end":{"line":85,"column":57}}],"line":85}},"s":{"0":1,"1":1,"2":1,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":1,"56":1,"57":1,"58":1,"59":1},"f":{"0":0,"1":0,"2":1},"b":{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0,0,0],"7":[0,0],"8":[0,0],"9":[1,1]},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/PostgresClient.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/lib/PostgresClient.ts"],"names":[],"mappings":"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","sourcesContent":["import { createConnection } from 'typeorm';\n\nexport class PostgresClient {\n    wordEmbeddings: number[][];\n    metric: PostgresDistanceMetric;\n    topK: number;\n    probes: number;\n    tableName: string;\n    namespace: string;\n    arkRequest: any;\n    upperLimit: number;\n\n    constructor(\n        wordEmbeddings: number[][],\n        metric,\n        topK,\n        probes,\n        tableName,\n        namespace: string,\n        arkRequest: any,\n        upperLimit\n    ) {\n        this.wordEmbeddings = wordEmbeddings;\n        this.metric = metric;\n        this.topK = topK;\n        this.probes = probes;\n        this.tableName = tableName;\n        this.namespace = namespace;\n        this.arkRequest = arkRequest;\n        this.upperLimit = upperLimit;\n    }\n\n    async dbQuery() {\n        const con = await createConnection();\n        const entityManager = con.createEntityManager();\n        try {\n            const query1 = `SET LOCAL ivfflat.probes = ${this.probes};`;\n            await entityManager.query(query1);\n\n            let query: string = '';\n\n            for (let i = 0; i < this.wordEmbeddings.length; i++) {\n                const embedding: string = JSON.stringify(this.wordEmbeddings[i]);\n\n                query += `( SELECT id, raw_text, document_date, metadata, namespace, filename, timestamp, \n                ${\n                    this.arkRequest.textWeight.baseWeight\n                } / (ROW_NUMBER() OVER (ORDER BY text_rank DESC) + ${\n                    this.arkRequest.textWeight.fineTuneWeight\n                }) +\n                ${\n                    this.arkRequest.similarityWeight.baseWeight\n                } / (ROW_NUMBER() OVER (ORDER BY similarity DESC) + ${\n                    this.arkRequest.similarityWeight.fineTuneWeight\n                }) +\n                ${\n                    this.arkRequest.dateWeight.baseWeight\n                } / (ROW_NUMBER() OVER (ORDER BY date_rank DESC) + ${\n                    this.arkRequest.dateWeight.fineTuneWeight\n                }) AS rrf_score\n                FROM ( SELECT sv.id, sv.raw_text, sv.namespace, sv.filename, sv.timestamp, svtm.document_date, svtm.metadata, ts_rank_cd(sv.tsv, plainto_tsquery('${'english'}', '${\n                    this.arkRequest.query\n                }')) AS text_rank, `;\n\n                if (this.metric === PostgresDistanceMetric.COSINE)\n                    query += `1 - (sv.embedding <=> '${embedding}') AS similarity, `;\n                if (this.metric === PostgresDistanceMetric.IP)\n                    query += `(sv.embedding <#> '${embedding}') * -1 AS similarity, `;\n                if (this.metric === PostgresDistanceMetric.L2)\n                    query += `sv.embedding <-> '${embedding}' AS similarity, `;\n\n                query += `CASE WHEN svtm.document_date IS NULL THEN 0 ELSE EXTRACT(YEAR FROM svtm.document_date) * 365 + EXTRACT(DOY FROM svtm.document_date) END AS date_rank FROM (SELECT id, raw_text, embedding, tsv, namespace, filename, timestamp from ${this.tableName} WHERE namespace = '${this.namespace}'`;\n\n                if (this.metric === PostgresDistanceMetric.COSINE)\n                    query += ` ORDER BY embedding <=> '${embedding}'  LIMIT ${this.topK}`;\n                if (this.metric === PostgresDistanceMetric.IP)\n                    query += ` ORDER BY embedding <#> '${embedding}'  LIMIT ${this.topK}`;\n                if (this.metric === PostgresDistanceMetric.L2)\n                    query += ` ORDER BY embedding <-> '${embedding}'  LIMIT ${this.topK}`;\n\n                query += `) sv JOIN ${this.tableName}_join_${this.arkRequest.metadataTable} jtm ON sv.id = jtm.id JOIN ${this.tableName}_${this.arkRequest.metadataTable} svtm ON jtm.metadata_id = svtm.metadata_id) subquery `;\n\n                switch (this.arkRequest.orderRRF) {\n                    case 'text_rank':\n                        query += `ORDER BY text_rank DESC, rrf_score DESC`;\n                        break;\n                    case 'similarity':\n                        query += `ORDER BY similarity DESC, rrf_score DESC`;\n                        break;\n                    case 'date_rank':\n                        query += `ORDER BY date_rank DESC, rrf_score DESC`;\n                        break;\n                    case 'default':\n                        query += `ORDER BY rrf_score DESC`;\n                        break;\n                }\n\n                query += ` LIMIT ${this.topK})`;\n                if (i < this.wordEmbeddings.length - 1) {\n                    query += ' UNION ALL \\n';\n                }\n            }\n\n            if (this.wordEmbeddings.length > 1) {\n                query = `SELECT * FROM (SELECT DISTINCT ON (result.id) * FROM ( ${query} ) result) subquery ORDER BY rrf_score DESC LIMIT ${this.upperLimit};`;\n            } else {\n                query += ` ORDER BY rrf_score DESC LIMIT ${this.topK};`;\n            }\n            const results = await entityManager.query(query);\n            await con.destroy();\n            return results;\n        } catch (error) {\n            // Handle errors here\n            console.error(error);\n            throw error;\n        }\n    }\n}\n\nenum PostgresDistanceMetric {\n    COSINE = 'COSINE',\n    IP = 'IP',\n    L2 = 'L2',\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"5639f9bcc787a8827404bc7635271b0a5ba05241","contentHash":"4f2b9ecb2389c9b8416bce3f5963107ec0354e46bc8053ba98948c3769f41747"},"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/testGeneration/TestGenerator.ts":{"path":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/testGeneration/TestGenerator.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":4,"column":23},"end":{"line":4,"column":56}},"3":{"start":{"line":5,"column":13},"end":{"line":5,"column":28}},"4":{"start":{"line":6,"column":25},"end":{"line":6,"column":58}},"5":{"start":{"line":7,"column":16},"end":{"line":7,"column":44}},"6":{"start":{"line":8,"column":19},"end":{"line":8,"column":83}},"7":{"start":{"line":9,"column":26},"end":{"line":9,"column":96}},"8":{"start":{"line":10,"column":21},"end":{"line":10,"column":191}},"9":{"start":{"line":11,"column":18},"end":{"line":23,"column":7}},"10":{"start":{"line":25,"column":4},"end":{"line":46,"column":5}},"11":{"start":{"line":26,"column":21},"end":{"line":26,"column":59}},"12":{"start":{"line":27,"column":27},"end":{"line":30,"column":44}},"13":{"start":{"line":31,"column":32},"end":{"line":31,"column":101}},"14":{"start":{"line":32,"column":8},"end":{"line":32,"column":67}},"15":{"start":{"line":33,"column":23},"end":{"line":33,"column":109}},"16":{"start":{"line":34,"column":8},"end":{"line":34,"column":61}},"17":{"start":{"line":35,"column":28},"end":{"line":35,"column":36}},"18":{"start":{"line":36,"column":8},"end":{"line":36,"column":50}},"19":{"start":{"line":37,"column":8},"end":{"line":37,"column":73}},"20":{"start":{"line":38,"column":8},"end":{"line":38,"column":65}},"21":{"start":{"line":39,"column":27},"end":{"line":39,"column":59}},"22":{"start":{"line":40,"column":8},"end":{"line":40,"column":32}},"23":{"start":{"line":41,"column":8},"end":{"line":41,"column":117}},"24":{"start":{"line":42,"column":8},"end":{"line":42,"column":30}},"25":{"start":{"line":45,"column":8},"end":{"line":45,"column":27}},"26":{"start":{"line":48,"column":0},"end":{"line":48,"column":32}},"27":{"start":{"line":50,"column":27},"end":{"line":50,"column":60}},"28":{"start":{"line":51,"column":23},"end":{"line":51,"column":25}},"29":{"start":{"line":53,"column":4},"end":{"line":55,"column":5}},"30":{"start":{"line":54,"column":8},"end":{"line":54,"column":34}},"31":{"start":{"line":56,"column":4},"end":{"line":56,"column":22}}},"fnMap":{"0":{"name":"getContent","decl":{"start":{"line":24,"column":15},"end":{"line":24,"column":25}},"loc":{"start":{"line":24,"column":28},"end":{"line":47,"column":1}},"line":24},"1":{"name":"extractCodeBlocks","decl":{"start":{"line":49,"column":9},"end":{"line":49,"column":26}},"loc":{"start":{"line":49,"column":33},"end":{"line":57,"column":1}},"line":49}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0},"f":{"0":0,"1":0},"b":{},"inputSourceMap":{"version":3,"file":"/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/testGeneration/TestGenerator.ts","sources":["/Users/harshvardhanparmar/Github-Projects/EdgeChains/JS/edgechains/examples/src/testGeneration/TestGenerator.ts"],"names":[],"mappings":";;;AAAA,yDAAiD;AACjD,6BAA6B;AAC7B,2DAAwD;AAExD,MAAM,OAAO,GAAG,IAAI,sBAAO,EAAE,CAAC;AAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAC,sCAAsC,CAAC,CAAC;AACnF,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAC,4CAA4C,CAAC,CAAC;AAEhG,MAAM,YAAY,GAAG,IAAI,+BAAc,CACnC,4CAA4C,EAC5C,qDAAqD,EACrD,EAAE,EACF,eAAe,EACf,MAAM,EACN,GAAG,CACN,CAAC;AAEF,MAAM,SAAS,GAAE,6CAA6C;IAC9D,2CAA2C;IAC3C,KAAK;IACL,iBAAiB;IACjB,4DAA4D;IAC5D,SAAS;IACT,+CAA+C;IAC/C,kDAAkD;IAClD,yEAAyE;IACzE,IAAI;IACJ,gCAAgC;IAChC,SAAS;IACT,GAAG,CAAC;AAEG,KAAK,UAAU,UAAU;IAC5B,IAAG;QAEC,IAAI,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;QAEpD,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,gBAAgB,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC;aACrD,SAAS,CAAC,YAAY,EAAC,SAAS,CAAC;aACjC,SAAS,CAAC,cAAc,EAAC,MAAM,CAAC;aAChC,YAAY,CAAC,iBAAiB,CAAC,CAAC;QAEjE,MAAM,eAAe,GAAG,MAAM,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,CAAC,CAAC;QAE9F,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAC,eAAe,CAAC,CAAC;QAEzD,IAAI,QAAQ,GAAG,MAAM,YAAY,CAAC,kBAAkB,CAAC,eAAe,GAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC;QAEpG,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAC,QAAQ,CAAC,CAAC;QACnD,IAAI,aAAa,GAAG,QAAQ,CAAC;QAE7B,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,UAAU,CAAC;QAE1C,aAAa,IAAI,MAAM,YAAY,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;QAEjE,OAAO,CAAC,GAAG,CAAC,2BAA2B,GAAC,aAAa,CAAC,CAAC;QAEvD,MAAM,UAAU,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAEpD,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACxB,QAAQ,GAAG,MAAM,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,cAAc,GAAC,MAAM,GAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACzG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;KAGzB;IAAA,OAAM,KAAK,EAAC;QACT,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACtB;AACL,CAAC;AAnCD,gCAmCC;AAED,SAAS,iBAAiB,CAAC,IAAY;IACnC,MAAM,cAAc,GAAG,iCAAiC,CAAC;IACzD,MAAM,UAAU,GAAa,EAAE,CAAC;IAChC,IAAI,KAAK,CAAC;IAEV,OAAO,CAAC,KAAK,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,IAAI,EAAE;QACnD,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;KAC3B;IAED,OAAO,UAAU,CAAC;AACpB,CAAC","sourcesContent":["import { Jsonnet } from \"@hanazuki/node-jsonnet\";\nimport * as path from 'path';\nimport { OpenAiEndpoint } from \"src/lib/OpenAiEndpoint\";\n\nconst jsonnet = new Jsonnet();\nconst promptPath = path.join(process.cwd(),'./src/testGeneration/prompts.jsonnet');\nconst testGeneratorPath = path.join(process.cwd(),'./src/testGeneration/testGenerator.jsonnet');\n\nconst gpt3endpoint = new OpenAiEndpoint(\n    'https://api.openai.com/v1/chat/completions',\n    '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',\n    '',\n    'gpt-3.5-turbo',\n    'user',\n    0.7\n);\n\nconst classText =\"@RestResource(urlMapping='/classcontent')\\n\" +\n\"global with sharing class ClassContent \\n\" +\n\"{\\n\" +\n\"    @HttpPost\\n\" +\n\"    global static String getClassInfo(String className) \\n\" +\n\"    {\\n\" +\n\"        String classContent = [SELECT Body \\n\" +\n\"                               FROM ApexClass \\n\" +\n\"                               WHERE Name = :className LIMIT 1].Body;\\n\" +\n\"\\n\" +\n\"        return classContent;\\n\" +\n\"    }\\n\" +\n\"}\";\n\nexport async function getContent(){\n    try{\n\n        var prompt = await jsonnet.evaluateFile(promptPath);\n\n        const testPrompt = await jsonnet.extString('promptTemplate',JSON.parse(prompt).prompt)\n                                        .extString('test_class',classText)\n                                        .extString('test_package','Apex')\n                                        .evaluateFile(testGeneratorPath);\n\n        const initialResponse = await gpt3endpoint.gptFnTestGenerator(JSON.parse(prompt).promptStart);\n\n        console.log('Initial Response.....\\n\\n'+initialResponse);\n\n        var responce = await gpt3endpoint.gptFnTestGenerator(initialResponse+JSON.parse(testPrompt).prompt);\n        \n        console.log('First Response.......\\n \\n'+responce);\n        var finalResponse = responce;\n\n        responce += JSON.parse(prompt).promptPlan;\n\n        finalResponse += await gpt3endpoint.gptFnTestGenerator(responce);\n        \n        console.log('Final Response.......\\n\\n'+finalResponse);\n\n        const codeBlocks = extractCodeBlocks(finalResponse);\n        \n        console.log(codeBlocks);\n        responce = await gpt3endpoint.gptFnTestGenerator(JSON.parse(prompt).textConversion+'\\n\\n'+codeBlocks[0]);\n        console.log(responce);\n\n       \n    }catch(error){\n        console.log(error);\n    }\n}\n\nfunction extractCodeBlocks(text: string): string[] {\n    const codeBlockRegex = /```(?:apex)\\s*([\\s\\S]+?)\\s*```/g;\n    const codeBlocks: string[] = [];\n    let match;\n  \n    while ((match = codeBlockRegex.exec(text)) !== null) {\n      codeBlocks.push(match[1]);\n    }\n  \n    return codeBlocks;\n  }"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"1985b4442b3b7d5613b4a77b99499da879141c54","contentHash":"9013d8dee93fd11bfcab6db337d37d544fdab7ba5e63f1eb91f76193d21b40c4"}}