// bringing back the Color tag removed in ink 3.0
const c = require('chalk');
const React = require('react');
const {
  memo
} = React;
const {
  Transform
} = require('ink');
const arrify = obj => Array.isArray(obj) ? obj : obj === '' || obj === null || obj === undefined ? [] : [obj];
const methods = ['hex', 'hsl', 'hsv', 'hwb', 'rgb', 'keyword', 'bgHex', 'bgHsl', 'bgHsv', 'bgHwb', 'bgRgb', 'bgKeyword', 'ansi', 'ansi256', 'bgAnsi', 'bgAnsi256'];
const Color = ({
  children,
  ...colorProps
}) => {
  if (children === '') return null;
  const transform = children => {
    for (const [method, value] of Object.entries(colorProps)) {
      if (methods.includes(method)) children = c[method](...arrify(value))(children);else if (typeof c[method] === 'function') children = c[method](children);
    }
    return children;
  };
  return /*#__PURE__*/React.createElement(Transform, {
    transform: transform
  }, children);
};
Color.displayName = 'Color';
Color.defaultProps = {
  children: ''
};
module.exports = memo(Color);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjIiwicmVxdWlyZSIsIlJlYWN0IiwibWVtbyIsIlRyYW5zZm9ybSIsImFycmlmeSIsIm9iaiIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsIm1ldGhvZHMiLCJDb2xvciIsImNoaWxkcmVuIiwiY29sb3JQcm9wcyIsInRyYW5zZm9ybSIsIm1ldGhvZCIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsImluY2x1ZGVzIiwiY3JlYXRlRWxlbWVudCIsImRpc3BsYXlOYW1lIiwiZGVmYXVsdFByb3BzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImNvbG9yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGJyaW5naW5nIGJhY2sgdGhlIENvbG9yIHRhZyByZW1vdmVkIGluIGluayAzLjBcbmNvbnN0IGMgPSByZXF1aXJlKCdjaGFsaycpXG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbmNvbnN0IHttZW1vfSA9IFJlYWN0XG5jb25zdCB7VHJhbnNmb3JtfSA9IHJlcXVpcmUoJ2luaycpXG5jb25zdCBhcnJpZnkgPSBvYmogPT4gQXJyYXkuaXNBcnJheShvYmopID8gb2JqXG4gIDogb2JqID09PSAnJyB8fCBvYmogPT09IG51bGwgfHwgb2JqID09PSB1bmRlZmluZWQgPyBbXVxuICA6IFtvYmpdXG5cbmNvbnN0IG1ldGhvZHMgPSBbXG4gICdoZXgnLFxuICAnaHNsJyxcbiAgJ2hzdicsXG4gICdod2InLFxuICAncmdiJyxcbiAgJ2tleXdvcmQnLFxuICAnYmdIZXgnLFxuICAnYmdIc2wnLFxuICAnYmdIc3YnLFxuICAnYmdId2InLFxuICAnYmdSZ2InLFxuICAnYmdLZXl3b3JkJyxcbiAgJ2Fuc2knLFxuICAnYW5zaTI1NicsXG4gICdiZ0Fuc2knLFxuICAnYmdBbnNpMjU2Jyxcbl1cblxuY29uc3QgQ29sb3IgPSAoe2NoaWxkcmVuLCAuLi5jb2xvclByb3BzfSkgPT4ge1xuICBpZiAoY2hpbGRyZW4gPT09ICcnKVxuICAgIHJldHVybiBudWxsXG5cbiAgY29uc3QgdHJhbnNmb3JtID0gY2hpbGRyZW4gPT4ge1xuICAgIGZvciAoY29uc3QgW21ldGhvZCwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGNvbG9yUHJvcHMpKSB7XG4gICAgICBpZiAobWV0aG9kcy5pbmNsdWRlcyhtZXRob2QpKVxuICAgICAgICBjaGlsZHJlbiA9IGNbbWV0aG9kXSguLi5hcnJpZnkodmFsdWUpKShjaGlsZHJlbilcbiAgICAgIGVsc2UgaWYgKHR5cGVvZiBjW21ldGhvZF0gPT09ICdmdW5jdGlvbicpXG4gICAgICAgIGNoaWxkcmVuID0gY1ttZXRob2RdKGNoaWxkcmVuKVxuICAgIH1cbiAgICByZXR1cm4gY2hpbGRyZW5cbiAgfVxuXG4gIHJldHVybiAoPFRyYW5zZm9ybSB0cmFuc2Zvcm09e3RyYW5zZm9ybX0+e2NoaWxkcmVufTwvVHJhbnNmb3JtPilcbn1cbkNvbG9yLmRpc3BsYXlOYW1lID0gJ0NvbG9yJ1xuXG5Db2xvci5kZWZhdWx0UHJvcHMgPSB7IGNoaWxkcmVuOiAnJyB9XG5cbm1vZHVsZS5leHBvcnRzID0gbWVtbyhDb2xvcilcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDMUIsTUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU07RUFBQ0U7QUFBSSxDQUFDLEdBQUdELEtBQUs7QUFDcEIsTUFBTTtFQUFDRTtBQUFTLENBQUMsR0FBR0gsT0FBTyxDQUFDLEtBQUssQ0FBQztBQUNsQyxNQUFNSSxNQUFNLEdBQUdDLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLEdBQzFDQSxHQUFHLEtBQUssRUFBRSxJQUFJQSxHQUFHLEtBQUssSUFBSSxJQUFJQSxHQUFHLEtBQUtHLFNBQVMsR0FBRyxFQUFFLEdBQ3BELENBQUNILEdBQUcsQ0FBQztBQUVULE1BQU1JLE9BQU8sR0FBRyxDQUNkLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLEVBQ0wsU0FBUyxFQUNULE9BQU8sRUFDUCxPQUFPLEVBQ1AsT0FBTyxFQUNQLE9BQU8sRUFDUCxPQUFPLEVBQ1AsV0FBVyxFQUNYLE1BQU0sRUFDTixTQUFTLEVBQ1QsUUFBUSxFQUNSLFdBQVcsQ0FDWjtBQUVELE1BQU1DLEtBQUssR0FBR0EsQ0FBQztFQUFDQyxRQUFRO0VBQUUsR0FBR0M7QUFBVSxDQUFDLEtBQUs7RUFDM0MsSUFBSUQsUUFBUSxLQUFLLEVBQUUsRUFDakIsT0FBTyxJQUFJO0VBRWIsTUFBTUUsU0FBUyxHQUFHRixRQUFRLElBQUk7SUFDNUIsS0FBSyxNQUFNLENBQUNHLE1BQU0sRUFBRUMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDTCxVQUFVLENBQUMsRUFBRTtNQUN4RCxJQUFJSCxPQUFPLENBQUNTLFFBQVEsQ0FBQ0osTUFBTSxDQUFDLEVBQzFCSCxRQUFRLEdBQUdaLENBQUMsQ0FBQ2UsTUFBTSxDQUFDLENBQUMsR0FBR1YsTUFBTSxDQUFDVyxLQUFLLENBQUMsQ0FBQyxDQUFDSixRQUFRLENBQUMsTUFDN0MsSUFBSSxPQUFPWixDQUFDLENBQUNlLE1BQU0sQ0FBQyxLQUFLLFVBQVUsRUFDdENILFFBQVEsR0FBR1osQ0FBQyxDQUFDZSxNQUFNLENBQUMsQ0FBQ0gsUUFBUSxDQUFDO0lBQ2xDO0lBQ0EsT0FBT0EsUUFBUTtFQUNqQixDQUFDO0VBRUQsb0JBQVFWLEtBQUEsQ0FBQWtCLGFBQUEsQ0FBQ2hCLFNBQVM7SUFBQ1UsU0FBUyxFQUFFQTtFQUFVLEdBQUVGLFFBQW9CLENBQUM7QUFDakUsQ0FBQztBQUNERCxLQUFLLENBQUNVLFdBQVcsR0FBRyxPQUFPO0FBRTNCVixLQUFLLENBQUNXLFlBQVksR0FBRztFQUFFVixRQUFRLEVBQUU7QUFBRyxDQUFDO0FBRXJDVyxNQUFNLENBQUNDLE9BQU8sR0FBR3JCLElBQUksQ0FBQ1EsS0FBSyxDQUFDIn0=