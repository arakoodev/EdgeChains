const React = require('react');
const ms = require('ms');
const {
  Box,
  Text
} = require('ink');
const importJSX = require('@isaacs/import-jsx');
const Test = importJSX('./test.js');
const chalk = require('chalk');
const Reset = importJSX('../../reset.js');
const s = n => new Array(n + 1).join(' ');
const bannerWords = '  ðŸŒˆ SUMMARY RESULTS ðŸŒˆ  ';
const banner = '\n' + chalk.bgHex('#fff')(s(bannerWords.length)) + '\n' + chalk.bgHex('#fff')(chalk.hex('#333')(chalk.bold(bannerWords))) + '\n' + chalk.bgHex('#fff')(s(bannerWords.length));
module.exports = ({
  results,
  tests
}) => /*#__PURE__*/React.createElement(Reset, null, /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, /*#__PURE__*/React.createElement(Text, null, banner), /*#__PURE__*/React.createElement(Box, {
  flexDirection: "column"
}, tests.filter(t => t.results && !t.results.ok || t.options.skip || t.options.todo || t.counts.total !== t.counts.pass).sort((a, b) => a.name.localeCompare(b.name, 'en')).map((test, i) => /*#__PURE__*/React.createElement(Test, {
  test: test,
  key: '' + i
})))));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJtcyIsIkJveCIsIlRleHQiLCJpbXBvcnRKU1giLCJUZXN0IiwiY2hhbGsiLCJSZXNldCIsInMiLCJuIiwiQXJyYXkiLCJqb2luIiwiYmFubmVyV29yZHMiLCJiYW5uZXIiLCJiZ0hleCIsImxlbmd0aCIsImhleCIsImJvbGQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVzdWx0cyIsInRlc3RzIiwiY3JlYXRlRWxlbWVudCIsImZsZXhEaXJlY3Rpb24iLCJmaWx0ZXIiLCJ0Iiwib2siLCJvcHRpb25zIiwic2tpcCIsInRvZG8iLCJjb3VudHMiLCJ0b3RhbCIsInBhc3MiLCJzb3J0IiwiYSIsImIiLCJuYW1lIiwibG9jYWxlQ29tcGFyZSIsIm1hcCIsInRlc3QiLCJpIiwia2V5Il0sInNvdXJjZXMiOlsic3VtbWFyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0JylcbmNvbnN0IG1zID0gcmVxdWlyZSgnbXMnKVxuY29uc3Qge0JveCwgVGV4dH0gPSByZXF1aXJlKCdpbmsnKVxuY29uc3QgaW1wb3J0SlNYID0gcmVxdWlyZSgnQGlzYWFjcy9pbXBvcnQtanN4JylcbmNvbnN0IFRlc3QgPSBpbXBvcnRKU1goJy4vdGVzdC5qcycpXG5jb25zdCBjaGFsayA9IHJlcXVpcmUoJ2NoYWxrJylcbmNvbnN0IFJlc2V0ID0gaW1wb3J0SlNYKCcuLi8uLi9yZXNldC5qcycpXG5cbmNvbnN0IHMgPSBuID0+IG5ldyBBcnJheShuICsgMSkuam9pbignICcpXG5cbmNvbnN0IGJhbm5lcldvcmRzID0gJyAg8J+MiCBTVU1NQVJZIFJFU1VMVFMg8J+MiCAgJ1xuY29uc3QgYmFubmVyID0gJ1xcbicgK1xuICBjaGFsay5iZ0hleCgnI2ZmZicpKHMoYmFubmVyV29yZHMubGVuZ3RoKSkgK1xuICAnXFxuJyArXG4gIGNoYWxrLmJnSGV4KCcjZmZmJykoY2hhbGsuaGV4KCcjMzMzJykoY2hhbGsuYm9sZChiYW5uZXJXb3JkcykpKSArXG4gICdcXG4nICtcbiAgY2hhbGsuYmdIZXgoJyNmZmYnKShzKGJhbm5lcldvcmRzLmxlbmd0aCkpXG5cbm1vZHVsZS5leHBvcnRzID0gKHsgcmVzdWx0cywgdGVzdHMgfSkgPT4gKDxSZXNldD48Qm94IGZsZXhEaXJlY3Rpb249XCJjb2x1bW5cIj5cbiAgPFRleHQ+e2Jhbm5lcn08L1RleHQ+XG4gIDxCb3ggZmxleERpcmVjdGlvbj1cImNvbHVtblwiPlxuICAgIHtcbiAgICAgIHRlc3RzXG4gICAgICAgIC5maWx0ZXIodCA9PiB0LnJlc3VsdHMgJiYgIXQucmVzdWx0cy5vayB8fFxuICAgICAgICAgICAgdC5vcHRpb25zLnNraXAgfHwgdC5vcHRpb25zLnRvZG8gfHxcbiAgICAgICAgICAgIHQuY291bnRzLnRvdGFsICE9PSB0LmNvdW50cy5wYXNzKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYS5uYW1lLmxvY2FsZUNvbXBhcmUoYi5uYW1lLCAnZW4nKSlcbiAgICAgICAgLm1hcCgodGVzdCwgaSkgPT4gKDxUZXN0IHRlc3Q9e3Rlc3R9IGtleT17JycraX0gLz4pKVxuICAgIH1cbiAgPC9Cb3g+XG48L0JveD48L1Jlc2V0PilcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFDLElBQUksQ0FBQztBQUN4QixNQUFNO0VBQUNFLEdBQUc7RUFBRUM7QUFBSSxDQUFDLEdBQUdILE9BQU8sQ0FBQyxLQUFLLENBQUM7QUFDbEMsTUFBTUksU0FBUyxHQUFHSixPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFDL0MsTUFBTUssSUFBSSxHQUFHRCxTQUFTLENBQUMsV0FBVyxDQUFDO0FBQ25DLE1BQU1FLEtBQUssR0FBR04sT0FBTyxDQUFDLE9BQU8sQ0FBQztBQUM5QixNQUFNTyxLQUFLLEdBQUdILFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUV6QyxNQUFNSSxDQUFDLEdBQUdDLENBQUMsSUFBSSxJQUFJQyxLQUFLLENBQUNELENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQ0UsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUV6QyxNQUFNQyxXQUFXLEdBQUcsMkJBQTJCO0FBQy9DLE1BQU1DLE1BQU0sR0FBRyxJQUFJLEdBQ2pCUCxLQUFLLENBQUNRLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQ04sQ0FBQyxDQUFDSSxXQUFXLENBQUNHLE1BQU0sQ0FBQyxDQUFDLEdBQzFDLElBQUksR0FDSlQsS0FBSyxDQUFDUSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUNSLEtBQUssQ0FBQ1UsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDVixLQUFLLENBQUNXLElBQUksQ0FBQ0wsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUMvRCxJQUFJLEdBQ0pOLEtBQUssQ0FBQ1EsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDTixDQUFDLENBQUNJLFdBQVcsQ0FBQ0csTUFBTSxDQUFDLENBQUM7QUFFNUNHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLENBQUM7RUFBRUMsT0FBTztFQUFFQztBQUFNLENBQUMsa0JBQU10QixLQUFBLENBQUF1QixhQUFBLENBQUNmLEtBQUsscUJBQUNSLEtBQUEsQ0FBQXVCLGFBQUEsQ0FBQ3BCLEdBQUc7RUFBQ3FCLGFBQWEsRUFBQztBQUFRLGdCQUMxRXhCLEtBQUEsQ0FBQXVCLGFBQUEsQ0FBQ25CLElBQUksUUFBRVUsTUFBYSxDQUFDLGVBQ3JCZCxLQUFBLENBQUF1QixhQUFBLENBQUNwQixHQUFHO0VBQUNxQixhQUFhLEVBQUM7QUFBUSxHQUV2QkYsS0FBSyxDQUNGRyxNQUFNLENBQUNDLENBQUMsSUFBSUEsQ0FBQyxDQUFDTCxPQUFPLElBQUksQ0FBQ0ssQ0FBQyxDQUFDTCxPQUFPLENBQUNNLEVBQUUsSUFDbkNELENBQUMsQ0FBQ0UsT0FBTyxDQUFDQyxJQUFJLElBQUlILENBQUMsQ0FBQ0UsT0FBTyxDQUFDRSxJQUFJLElBQ2hDSixDQUFDLENBQUNLLE1BQU0sQ0FBQ0MsS0FBSyxLQUFLTixDQUFDLENBQUNLLE1BQU0sQ0FBQ0UsSUFBSSxDQUFDLENBQ3BDQyxJQUFJLENBQUMsQ0FBQ0MsQ0FBQyxFQUFFQyxDQUFDLEtBQUtELENBQUMsQ0FBQ0UsSUFBSSxDQUFDQyxhQUFhLENBQUNGLENBQUMsQ0FBQ0MsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQ2xERSxHQUFHLENBQUMsQ0FBQ0MsSUFBSSxFQUFFQyxDQUFDLGtCQUFNekMsS0FBQSxDQUFBdUIsYUFBQSxDQUFDakIsSUFBSTtFQUFDa0MsSUFBSSxFQUFFQSxJQUFLO0VBQUNFLEdBQUcsRUFBRSxFQUFFLEdBQUNEO0FBQUUsQ0FBRSxDQUFFLENBRXBELENBQ0YsQ0FBUSxDQUFFIn0=