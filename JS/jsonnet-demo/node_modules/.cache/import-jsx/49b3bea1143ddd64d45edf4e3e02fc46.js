const React = require('react');
const {
  Box,
  Text
} = require('ink');
const importJSX = require('@isaacs/import-jsx');
const Color = importJSX('../../color.js');
const glyphColor = ({
  ok,
  skip,
  todo
}) => ({
  [skip ? 'cyan' : todo ? 'magenta' : !ok ? 'red' : 'green']: true
});
const glyphText = ({
  ok,
  skip,
  todo
}) => skip ? ' ~ ' : todo ? ' ☐ ' : !ok ? ' ✖ ' : ' ✓ ';
const Glyph = ({
  ok,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, {
  width: 3
}, /*#__PURE__*/React.createElement(Color, Object.assign({
  bold: true
}, glyphColor({
  ok,
  skip,
  todo
})), /*#__PURE__*/React.createElement(Text, null, glyphText({
  ok,
  skip,
  todo
}))));
const Reason = ({
  skip,
  todo
}) => skip && skip !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, skip))) : todo && todo !== true ? /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Text, null, ' > '), /*#__PURE__*/React.createElement(Color, glyphColor({
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, todo))) : /*#__PURE__*/React.createElement(Text, null);
const AssertName = ({
  ok,
  name,
  skip,
  todo
}) => /*#__PURE__*/React.createElement(Box, null, /*#__PURE__*/React.createElement(Glyph, {
  ok,
  skip,
  todo
}), /*#__PURE__*/React.createElement(Text, null, name || '(unnamed test)'), /*#__PURE__*/React.createElement(Reason, {
  skip,
  todo
}));
module.exports = AssertName;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJCb3giLCJUZXh0IiwiaW1wb3J0SlNYIiwiQ29sb3IiLCJnbHlwaENvbG9yIiwib2siLCJza2lwIiwidG9kbyIsImdseXBoVGV4dCIsIkdseXBoIiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiT2JqZWN0IiwiYXNzaWduIiwiYm9sZCIsIlJlYXNvbiIsIkFzc2VydE5hbWUiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImFzc2VydC1uYW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKVxuY29uc3Qge0JveCwgVGV4dH0gPSByZXF1aXJlKCdpbmsnKVxuY29uc3QgaW1wb3J0SlNYID0gcmVxdWlyZSgnQGlzYWFjcy9pbXBvcnQtanN4JylcbmNvbnN0IENvbG9yID0gaW1wb3J0SlNYKCcuLi8uLi9jb2xvci5qcycpXG5cbmNvbnN0IGdseXBoQ29sb3IgPSAoeyBvaywgc2tpcCwgdG9kbyB9KSA9PiAoe1xuICBbIHNraXAgPyAnY3lhbidcbiAgOiB0b2RvID8gJ21hZ2VudGEnXG4gIDogIW9rID8gJ3JlZCdcbiAgOiAnZ3JlZW4nXTogdHJ1ZSxcbn0pXG5cbmNvbnN0IGdseXBoVGV4dCA9ICh7IG9rLCBza2lwLCB0b2RvIH0pID0+XG4gIHNraXAgPyAnIH4gJ1xuICA6IHRvZG8gPyAnIOKYkCAnXG4gIDogIW9rID8gJyDinJYgJ1xuICA6ICcg4pyTICdcblxuY29uc3QgR2x5cGggPSAoeyBvaywgc2tpcCwgdG9kbyB9KSA9PiAoXG4gIDxCb3ggd2lkdGg9ezN9PlxuICAgIDxDb2xvciBib2xkIHsuLi5nbHlwaENvbG9yKHtvaywgc2tpcCwgdG9kb30pfT5cbiAgICAgIDxUZXh0PntnbHlwaFRleHQoe29rLCBza2lwLCB0b2RvfSl9PC9UZXh0PlxuICAgIDwvQ29sb3I+XG4gIDwvQm94PlxuKVxuXG5jb25zdCBSZWFzb24gPSAoe3NraXAsIHRvZG99KSA9PlxuICBza2lwICYmIHNraXAgIT09IHRydWUgPyAoXG4gICAgPEJveD5cbiAgICAgIDxUZXh0PnsnID4gJ308L1RleHQ+XG4gICAgICA8Q29sb3Igey4uLmdseXBoQ29sb3Ioe3NraXAsIHRvZG99KX0+PFRleHQ+e3NraXB9PC9UZXh0PjwvQ29sb3I+XG4gICAgPC9Cb3g+XG4gIClcbiAgOiB0b2RvICYmIHRvZG8gIT09IHRydWUgPyAoXG4gICAgPEJveD5cbiAgICAgIDxUZXh0PnsnID4gJ308L1RleHQ+XG4gICAgICA8Q29sb3Igey4uLmdseXBoQ29sb3Ioe3NraXAsIHRvZG99KX0+PFRleHQ+e3RvZG99PC9UZXh0PjwvQ29sb3I+XG4gICAgPC9Cb3g+XG4gIClcbiAgOiA8VGV4dD48L1RleHQ+XG5cbmNvbnN0IEFzc2VydE5hbWUgPSAoeyBvaywgbmFtZSwgc2tpcCwgdG9kbyB9KSA9PiAoXG4gIDxCb3g+XG4gICAgPEdseXBoIHsuLi57b2ssIHNraXAsIHRvZG99fSAvPlxuICAgIDxUZXh0PntuYW1lIHx8ICcodW5uYW1lZCB0ZXN0KSd9PC9UZXh0PlxuICAgIDxSZWFzb24gey4uLntza2lwLCB0b2RvfX0gLz5cbiAgPC9Cb3g+XG4pXG5cbm1vZHVsZS5leHBvcnRzID0gQXNzZXJ0TmFtZVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxLQUFLLEdBQUdDLE9BQU8sQ0FBQyxPQUFPLENBQUM7QUFDOUIsTUFBTTtFQUFDQyxHQUFHO0VBQUVDO0FBQUksQ0FBQyxHQUFHRixPQUFPLENBQUMsS0FBSyxDQUFDO0FBQ2xDLE1BQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQy9DLE1BQU1JLEtBQUssR0FBR0QsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0FBRXpDLE1BQU1FLFVBQVUsR0FBR0EsQ0FBQztFQUFFQyxFQUFFO0VBQUVDLElBQUk7RUFBRUM7QUFBSyxDQUFDLE1BQU07RUFDMUMsQ0FBRUQsSUFBSSxHQUFHLE1BQU0sR0FDYkMsSUFBSSxHQUFHLFNBQVMsR0FDaEIsQ0FB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