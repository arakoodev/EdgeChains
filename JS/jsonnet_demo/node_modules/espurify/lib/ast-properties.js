module.exports = {
    AssignmentExpression: ['type', 'operator', 'left', 'right'],
    ArrayExpression: ['type', 'elements'],
    ArrayPattern: ['type', 'elements'],
    // ArrowFunctionExpression: ['type', 'params', 'defaults', 'rest', 'body', 'generator', 'expression'],
    BlockStatement: ['type', 'body'],
    BinaryExpression: ['type', 'operator', 'left', 'right'],
    BreakStatement: ['type', 'label'],
    CallExpression: ['type', 'callee', 'arguments'],
    CatchClause: ['type', 'param', 'guard', 'body'],
    // ClassBody: ['type', 'body'],
    // ClassDeclaration: ['type', 'id', 'body', 'superClass'],
    // ClassExpression: ['type', 'id', 'body', 'superClass'],
    ConditionalExpression: ['type', 'test', 'consequent', 'alternate'],
    ContinueStatement: ['type', 'label'],
    DebuggerStatement: ['type'],
    // DirectiveStatement: ['type'],
    DoWhileStatement: ['type', 'body', 'test'],
    EmptyStatement: ['type'],
    ExpressionStatement: ['type', 'expression'],
    ForStatement: ['type', 'init', 'test', 'update', 'body'],
    ForInStatement: ['type', 'left', 'right', 'body', 'each'],
    FunctionDeclaration: ['type', 'id', 'params', 'defaults', 'rest', 'body', 'generator', 'expression'],
    FunctionExpression: ['type', 'id', 'params', 'defaults', 'rest', 'body', 'generator', 'expression'],
    Identifier: ['type', 'name'],
    IfStatement: ['type', 'test', 'consequent', 'alternate'],
    Literal: ['type', 'value'],
    LabeledStatement: ['type', 'label', 'body'],
    LogicalExpression: ['type', 'operator', 'left', 'right'],
    MemberExpression: ['type', 'object', 'property', 'computed'],
    // MethodDefinition: ['type', 'key', 'value'],
    NewExpression: ['type', 'callee', 'arguments'],
    ObjectExpression: ['type', 'properties'],
    ObjectPattern: ['type', 'properties'],
    Program: ['type', 'body'],
    Property: ['type', 'key', 'value', 'kind'],
    ReturnStatement: ['type', 'argument'],
    SequenceExpression: ['type', 'expressions'],
    SwitchStatement: ['type', 'discriminant', 'cases', 'lexical'],
    SwitchCase: ['type', 'test', 'consequent'],
    ThisExpression: ['type'],
    ThrowStatement: ['type', 'argument'],
    TryStatement: ['type', 'block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
    UnaryExpression: ['type', 'operator', 'prefix', 'argument'],
    UpdateExpression: ['type', 'operator', 'argument', 'prefix'],
    VariableDeclaration: ['type', 'declarations', 'kind'],
    VariableDeclarator: ['type', 'id', 'init'],
    WhileStatement: ['type', 'test', 'body'],
    WithStatement: ['type', 'object', 'body'],
    YieldExpression: ['type', 'argument']
};
